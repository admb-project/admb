# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc
# nmake DEBUG=1
# nmake zip DEBUG=1
# nmake verify SAFE_ONLY=1 DEBUG=1

trigger:
- master
- dev

jobs:

- job: VS2019_vcvars32
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: |
      pushd "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build" & call vcvars32.bat & popd
      nmake
      nmake zip
      pushd tests& nmake examples
      pushd tests& nmake outputs.txt
      pushd tests& nmake gtests
  - task: CopyFiles@2
    inputs:
      contents: |
        admb.zip
        outputs.txt
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: VS2019_vcvars32

- job: VS2019_vcvars64
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: |
      pushd "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build" & call vcvars64.bat & popd
      nmake
      nmake zip
      pushd tests& nmake examples
      pushd tests& nmake outputs.txt
      pushd tests& nmake gtests
  - task: CopyFiles@2
    inputs:
      contents: |
        admb.zip
        outputs.txt
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: VS2019_vcvars64

- job: VS2022_vcvars32
  pool:
    vmImage: 'windows-2022'
  steps:
  - script: |
      pushd "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build" & call vcvars32.bat & popd
      nmake
      nmake zip
      pushd tests& nmake examples
      pushd tests& nmake outputs.txt
      pushd tests& nmake gtests
  - task: CopyFiles@2
    inputs:
      contents: |
        admb.zip
        outputs.txt
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: VS2022_vcvars32

- job: VS2022_vcvars64
  pool:
    vmImage: 'windows-2022'
  steps:
  - script: |
      pushd "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build" & call vcvars64.bat & popd
      nmake
      nmake zip
      pushd tests& nmake examples
      pushd tests& nmake outputs.txt
      pushd tests& nmake gtests
  - task: CopyFiles@2
    inputs:
      contents: |
        admb.zip
        outputs.txt
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: VS2022_vcvars64

- job: MacOS
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: make clean
  - script: make -j 2 DEBUG=yes
  - script: make zip
  - script: make --directory=scripts/installers/packagemaker
  - script: make --directory=tests DEBUG=yes tests-core unit-gtests
  - script: make --directory=tests examples
  - script: make --directory=tests outputs.txt
  - task: CopyFiles@2
    inputs:
      contents: |
        admb.zip
        build/admb-macos.dmg
        outputs.txt
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: MacOS

- job: Ubuntu
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      make
      make zip
      make verify TESTS_REMOTE=gtests
    displayName: 'make'
  - task: CopyFiles@2
    inputs:
      contents: |
        admb.zip
        outputs.txt
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: Ubuntu

- job: MacOS_debug
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: make -j 2 DEBUG=yes clean
  - script: make -j 2 DEBUG=yes
  - script: make zip DEBUG=yes
  - script: make --directory=scripts/installers/packagemaker DEBUG=yes
  - script: make --directory=tests DEBUG=yes examples tests-contrib tests-remote
  - script: make --directory=tests examples
  - script: make --directory=tests outputs.txt
  - task: CopyFiles@2
    inputs:
      contents: |
        admb.zip
        build/admb-macos.dmg
        outputs.txt
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: MacOS_debug

- job: Ubuntu_debug
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      make DEBUG=yes
      make zip DEBUG=yes
      make --directory=tests DEBUG=yes tests-contrib tests-remote unit-gtests
      make --directory=tests examples
      make --directory=tests outputs.txt
    displayName: 'make'
  - task: CopyFiles@2
    inputs:
      contents: |
        admb.zip
        outputs.txt
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: Ubuntu_debug
