# makefile for AUTODIF examples using Zortech compiler and make utility
# change the definitions of these macros to suit your system

# path to search for Zortech header files and fvar.hpp
INCLUDE = C:\ZOR\INCLUDE;\AUTODIF\INCLUDE

# path to search for AUTODIF libraries
LIB = \AUTODIF\LIB

# compiler flags
#         compile only
#         |  large model
#         |  |   surpress warnings
#         |  |   |
CFLAGS = -c -ml -w

# compiler to use
CC = ztc 

# linker to use
LL = blink

# 80386 users may prefer
# LL = blinkx

# autodif library to use
LIBRARY = autdif7.lib

# rule to make all examples
all: simple.exe hemholtz.exe minimize.exe newt.exe io_examp.exe mixture.exe \
     normsim.exe robust.exe robsim.exe winit.exe neur1.exe bigmin.exe

# rules for individual executables
io_examp.exe: io_examp.obj
  $(LL) io_examp.obj,io_examp,,$(LIB)\$(LIBRARY)

mixture.exe: mixture.h mixture.obj fcomp_m.obj like.obj normaliz.obj \
  nvarcal.obj reset.obj savepar.obj xinit.obj 
  $(LL) mixture.obj+fcomp_m.obj+like.obj+normaliz.obj+nvarcal.obj+\
  reset.obj+savepar.obj+xinit.obj,mixture,,$(LIB)\$(LIBRARY)

normsim.exe: normsim.obj
  $(LL) normsim.obj,normsim,,$(LIB)\$(LIBRARY)
 
hemholtz.exe: hemholtz.obj hem_func.obj 
  $(LL) hemholtz.obj + hem_func.obj,hemholtz,,$(LIB)\$(LIBRARY)
 
minimize.exe: minimize.obj userfun.obj 
  $(LL) minimize.obj + userfun.obj,minimize,,$(LIB)\$(LIBRARY)
 
newt.exe: newt.obj
  $(LL) newt.obj,newt,,$(LIB)\$(LIBRARY)

simple.exe: simple.obj fcomp_s.obj 
  $(LL) simple.obj + fcomp_s.obj,simple,,$(LIB)\$(LIBRARY)

robust.exe: robust.obj rob_reg.obj fcomp_r.obj
  $(LL) robust.obj+ rob_reg.obj+ fcomp_r.obj,robust,,$(LIB)\$(LIBRARY)

robsim.exe: robsim.obj
  $(LL) robsim.obj,robsim,,$(LIB)\$(LIBRARY)

neur1.exe: neur1.obj
  $(LL) neur1.obj,neur1,,$(LIB)\$(LIBRARY)

winit.exe: winit.obj
  $(LL) winit.obj,winit,,$(LIB)\$(LIBRARY)

bigmin.exe: bigmin.obj
  ztc -mx bigmin.obj $(LIB)\autdifx7.lib

bigmin.obj: bigmin.cpp
  $(CC)   -c -mx -w- -I$(INCLUDE) bigmin.cpp 

# implicit rule
.cpp.obj:
  $(CC) $(CFLAGS) -I$(INCLUDE) $< 
