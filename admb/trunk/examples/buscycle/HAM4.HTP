class model_data{
  data_number a1init;
  data_int nperiods1;
  int nperiods;
  data_vector yraw;
  dvector y;
  int order;
  int op1;
  int nstates;
  ~model_data();
  model_data();
  friend class model_parameters;
};

class model_parameters : public ad_comm , public model_data ,
  public function_minimizer
{
public:
  void preliminary_calculations(void);
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_vector f;
  param_init_bounded_matrix Pcoff;
  param_init_number a0;
  param_init_bounded_number a1;
  param_init_bounded_number smult;
  param_matrix z;
  param_matrix qbefore;
  param_matrix qafter;
  param_number sigma;
  param_number var;
  param_stddev_matrix P;
  param_number ff1;
  param_vector qb1;
  param_matrix qb2;
  param_3array qb3;
  param_4array qb4;
  param_6array qb;
  param_6array qa;
  param_6array eps;
  param_6array eps2;
  param_6array prob;
  objective_function_value ff;
public:
  virtual void userfunction(void);
  virtual void report(void);
  model_parameters(int sz=0,int argc=NULL, char * argv[]=NULL);
  virtual void initializationfunction(void){}
};
