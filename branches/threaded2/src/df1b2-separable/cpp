adrndeff.h:  dmatrix * antiepsilon;
adrndeff.h:  dmatrix epsilon;
df1b2im2.cpp:       dvar_vector tau=solve_trans(ch,pmin->lapprox->epsilon(is));
df1b2im2.cpp:         -0.5*norm2(pmin->lapprox->epsilon(is));
df1b2im2.cpp:       dvar_vector tau=solve_trans(ch,pmin->lapprox->epsilon(is));
df1b2im2.cpp:       normal_weight(is)=0.5*norm2(pmin->lapprox->epsilon(is));
df1b2im3.cpp:         pmin->lapprox->epsilon(is)(offset+1,offset+lus).shift(1);
df1b2im3.cpp:       double neps=0.5*norm2(pmin->lapprox->epsilon(is));
df1b2im3.cpp:       dvector& e=pmin->lapprox->epsilon(is);
df1b2im3.cpp:       dvector e= pmin->lapprox->epsilon(is)(offset+1,offset+lus).shift(1);
df1b2im3f.cpp:           pmin->lapprox->epsilon(is)(offset+1,offset+lus).shift(1);
df1b2im3f.cpp:           -0.5*norm2(pmin->lapprox->epsilon(is))-.91893853320467274177;
df1b2im3f.cpp:         dvector& e=pmin->lapprox->epsilon(is);
df1b2im4.cpp:           pmin->lapprox->epsilon(is)(offset+1,offset+lus).shift(1);
df1b2im4.cpp:       double neps=0.5*norm2(pmin->lapprox->epsilon(is));
df1b2im4.cpp:       dvector& e=pmin->lapprox->epsilon(is);
df1b2im4.cpp:       dvector e= pmin->lapprox->epsilon(is)(offset+1,offset+lus).shift(1);
df1b2im5.cpp:         (*pmin->lapprox->antiepsilon)(is);
df1b2im5.cpp:       double neps=0.5*nsc*norm2((*pmin->lapprox->antiepsilon)(is));
df1b2im5.cpp:       dvector& e=pmin->lapprox->epsilon(is);
df1b2im5.cpp:       dvector e= (*pmin->lapprox->antiepsilon)(is);
df1b2imp.cpp:     dvar_vector tau=ch*pmin->lapprox->epsilon(is);
df1b2imp.cpp:       -0.5*norm2(pmin->lapprox->epsilon(is));
df1b2impf.cpp:       dvar_vector tau=ch*pmin->lapprox->epsilon(is);
df1b2impf.cpp:           -0.5*norm2(pmin->lapprox->epsilon(is));
df1b2impf.cpp:         dvector& e=pmin->lapprox->epsilon(is);
df1b2impspf.cpp:       //dvar_vector tau=ch*pmin->lapprox->epsilon(is);
df1b2impspf.cpp:         pmin->lapprox->epsilon(is));
df1b2impspf.cpp:           -0.5*norm2(pmin->lapprox->epsilon(is));
df1b2impspf.cpp:           pmin->lapprox->epsilon(is)));
df1b2impspf.cpp:           pmin->lapprox->epsilon(is));
df1b2impspf.cpp:             -0.5*norm2(pmin->lapprox->epsilon(is));
df1b2impspf.cpp:              pmin->lapprox->epsilon(is)));
df1b2lap.cpp:  antiepsilon=0;
df1b2lap.cpp:    if (allocated(epsilon)) epsilon.deallocate();
df1b2lap.cpp:    epsilon.allocate(1,num_importance_samples,1,usize);
df1b2lap.cpp:      epsilon.sub(1,n2).fill_randn(rng);
df1b2lap.cpp:            if (os(i,j)<0.05) epsilon(i,j)*=3.0;
df1b2lap.cpp:        epsilon(i+n2)=-epsilon(i);
df1b2lap.cpp:      epsilon.fill_randn(rng);
df1b2lap.cpp:            if (os(i,j)<0.05) epsilon(i,j)*=3.0;
df1b2lap.cpp:        epsilon(i)*=eps_mult;
df1b2lap.cpp:  antiepsilon=0;
df1b2lp8.cpp:  if (antiepsilon)
df1b2lp8.cpp:    if (allocated(*antiepsilon))
df1b2lp8.cpp:      delete antiepsilon;
df1b2lp8.cpp:      antiepsilon=0;
df1b2lp8.cpp:  antiepsilon=new dmatrix(1,samplesize,1,n);
df1b2lp8.cpp:  dmatrix & M=*antiepsilon;
