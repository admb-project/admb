#include <fvar.hpp>
dvariable reset(ivector& control,dvar_vector& x,dvar_vector& p, dvar_vector& mu,
    dvar_vector& sd,dvector& mumin, dvector& mumax, dvector& sdmin,
    dvector& sdmax);
dvariable log_likelihood(dvector y,dvar_vector p,dvar_vector& mu,
	dvar_vector& sd);
void xinit(ivector& control,independent_variables& x,dvector& p,dvector& mu,
    dvector& sd,dvector& mumin,dvector& mumax,dvector& sdmin,dvector& sdmax);
int nvarcal(ivector& control ,int ngroups);
double fcomp(dvector y,dvar_vector p,dvar_vector& mu,dvar_vector& sd,
  dvector& mumin, dvector& mumax, dvector& sdmin, dvector& sdmax,
  ivector& control,dvar_vector& x,int print_switch);
dvariable normalize_p(dvar_vector& p);
void save_pars(dvar_vector& p,dvar_vector& mu,dvar_vector& sd,
  dvector& mumin, dvector& mumax,dvector& sdmin, dvector& sdmax,
  ivector& control);

extern unsigned _stklen=20000;
main()
{
  // The observations are in the file mixture.dat
  dvector y("mixture.dat"); // Read in the observations
  ifstream infile2("mixture.par"); // The parameter estimates are in a
				   // file named mixture.par
  int ngroups;
  infile2 >> ngroups; // Read in the number of groups
  ivector control(1,10); // There are 10 control switches for this model
  infile2 >> control; // Read in the control switches
  dvector p(1,ngroups);
  dvector mu(1,ngroups);
  dvector sd(1,ngroups);
  dvector mumin(1,ngroups);
  dvector mumax(1,ngroups);
  dvector sdmin(1,ngroups);
  dvector sdmax(1,ngroups);
  infile2 >> p;  // Read in the mixture proportions
  infile2 >> mu; // Read in the mean lengths
  infile2 >> sd; // Read in the standard deviations
  infile2 >> mumin; // Read in the mean lengths
  infile2 >> mumax; // Read in the mean lengths
  infile2 >> sdmin; // Read in the standard deviations
  infile2 >> sdmax; // Read in the standard deviations
  infile2.close(); // close the file
  int nvar=nvarcal(control,ngroups); // Get the number of independent variables
  independent_variables x(1,nvar);
  double f;
  dvector g(1,nvar);
  xinit(control,x,p,mu,sd,mumin,mumax,sdmin,sdmax); // Get the initial x values
  fmm fmc(nvar);
  BEGIN_MINIMIZATION(nvar,f,x,g,fmc) // Estimate the parameters by minimizing fcomp
    f=fcomp(y,p,mu,sd,mumin,mumax,sdmin,sdmax,control,x,0);
  END_MINIMIZATION(nvar,g)
  fcomp(y,p,mu,sd,mumin,mumax,sdmin,sdmax,control,x,1); // Save the parameter
							// estimates
}

dvariable log_likelihood(dvector y,dvar_vector p,dvar_vector& mu,
	dvar_vector& sd)
{
  dvariable like_fun=0.;
  int nobs=y.size();
  int ngroups=p.size();
  dvar_vector v=elem_prod(sd,sd); // Calculate the variances
  dvariable sum;
  dvariable diff;
  for (int i=1;i<=nobs;i++)
  {
    sum=0.;
    for (int j=1;j<=ngroups;j++)
    {
      diff=y(i)-mu(j);
      sum+=p(j)/sd(j)*exp(-diff*diff/(2.*v(j)));
    } 
    like_fun+=log(sum+1.e-20);  // Likelihood contribution for i'th observation
  }
  return(like_fun);
}

dvariable reset(ivector& control,dvar_vector& x,dvar_vector& p, dvar_vector& mu,
    dvar_vector& sd,dvector& mumin, dvector& mumax, dvector& sdmin,
    dvector& sdmax)
{
  dvariable zpen=0.;
  int ngroups=p.size();
  int ii=1;
  if (control(1)>0)  // control(1) determines whether the p's are active
  {
    for (int j=1;j<=ngroups;j++)
    {
      p(j)=boundp(x(ii++),0.,1.,zpen);
    }
  }
  if (control(2)>0)  // control(2) determines whether the mu's are active
  {
    for (int j=1;j<=ngroups;j++)
    {
      mu(j)=boundp(x(ii++),mumin(j),mumax(j),zpen);
    }
  }
  if (control(3)>0)  // control(3) determines whether the sd's are active
  {
    for (int j=1;j<=ngroups;j++)
    {
      sd(j)=boundp(x(ii++),sdmin(j),sdmax(j),zpen);
    }
  }
  return(zpen); // Return zpen so it can be added to the function being
 		// minimized
}

void xinit(ivector& control,independent_variables& x,dvector& p,dvector& mu,
    dvector& sd,dvector& mumin,dvector& mumax,dvector& sdmin,dvector& sdmax)
{
  int ngroups=p.size();
  int ii=1;
  if (control(1)>0)  // control(1) determines whether the p's are active
  {
    for (int j=1;j<=ngroups;j++)    
    {
      x(ii++)=boundpin(p(j),0.,1.);
    }
  }
  if (control(2)>0)  // control(2) determines whether the mu's are active
  {
    for (int j=1;j<=ngroups;j++)    
    {
      x(ii++)=boundpin(mu(j),mumin(j),mumax(j));
    }
  }
  if (control(3)>0)  // control(3) determines whether the sd's are active
  {
    for (int j=1;j<=ngroups;j++)    
    {
      x(ii++)=boundpin(sd(j),sdmin(j),sdmax(j));
    }
  }
}

int nvarcal(ivector& control ,int ngroups)
{
  int ii=1;
  if (control(1)>0)  // control(1) determines whether the p's are active
  {
    for (int j=1;j<=ngroups;j++)
    {
      ii++;
    }
  }
  if (control(2)>0)  // control(2) determines whether the mu's are active
  {
    for (int j=1;j<=ngroups;j++)
    {
      ii++;
    }
  }
  if (control(3)>0)  // control(3) determines whether the sd's are active
  {
    for (int j=1;j<=ngroups;j++)
    {
      ii++;
    }
  }
  int nvar=ii-1;
  return(nvar);
}

double fcomp(dvector y,dvar_vector p,dvar_vector& mu,dvar_vector& sd,
  dvector& mumin, dvector& mumax, dvector& sdmin, dvector& sdmax,
  ivector& control,dvar_vector& x,int print_switch)
{
  dvariable zpen;
  zpen=reset(control,x,p,mu,sd,mumin,mumax,sdmin,sdmax); // Put the x vector
                                 // into the model parameters and return the 
                                 //bounding function penalty in zpen
  zpen+=normalize_p(p); // Make the proportions sum to 1
  if (print_switch == 1)
  {
    save_pars(p,mu,sd,mumin,mumax,sdmin,sdmax,control);
  }
  dvariable f;
  f=-log_likelihood(y,p,mu,sd); // Change the sign to minimize
  f=f+zpen; // Add the penalty from the ``bounding'' functions
  return(value(f));
}

dvariable normalize_p(dvar_vector& p)
{
  dvariable psum=sum(p);
  p=p/psum;  // Now the p's will sum to 1
  dvariable zpen=1000.*log(psum)*log(psum);
  return(zpen);
}

void save_pars(dvar_vector& p,dvar_vector& mu,dvar_vector& sd,
  dvector& mumin, dvector& mumax,dvector& sdmin, dvector& sdmax,
  ivector& control)
{
  ofstream outfile("mixture.par");
  outfile << p.size() << "\n";  // The number of groups
  outfile << control << "\n";
  outfile << p << "\n\n";
  outfile << mu << "\n\n";
  outfile << sd << "\n\n";
  outfile << mumin << "\n\n";
  outfile << mumax << "\n\n";
  outfile << sdmin << "\n\n";
  outfile << sdmax;
}
