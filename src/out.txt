linad99/cmpdif4.cpp:  fwrite((double*)v.va + min, sizeof(double) * static_cast<size_t>(max - min + 1));
linad99/cmpdif5.cpp:  size_t size = static_cast<size_t>(max - min + 1);
linad99/cmpdif6.cpp:  size_t size = static_cast<size_t>(max - min + 1);
linad99/conjprod.cpp:  int size = static_cast<int>(d.size());
linad99/cranfill.cpp:  double x = norm(vec) / sqrt(static_cast<double>(vec.size()));
linad99/d4arr.cpp:    t -= static_cast<int>(hsl);
linad99/df11fun.cpp:    static_cast<unsigned int>(max < min ? 0 : max - min + 1)];
linad99/df12fun.cpp:    static_cast<unsigned int>(max < min ? 0 : max - min + 1)];
linad99/df13fun.cpp:    static_cast<unsigned int>(max < min ? 0 : max - min + 1)];
linad99/df_file2.cpp:  if (toffset < static_cast<OFF_T>(num_bytes))
linad99/df_file.cpp:  lpos = LSEEK(file_ptr, -static_cast<OFF_T>(buff_size), SEEK_CUR);
linad99/dfsdmat.cpp:  m=new double*[static_cast<unsigned int>(n)];
linad99/dmat10.cpp:    unsigned int cols = static_cast<unsigned int>(columns[i]);
linad99/dmat34.cpp:    return static_cast<int>(colsize);
linad99/dmat38.cpp:    return static_cast<int>(colsize);
linad99/dmat3.cpp:  int n = static_cast<int>(a.colsize());
linad99/dmat.cpp:      m = static_cast<dvector*>(shape->get_pointer());
linad99/dtweedie.cpp:  return static_cast<double>(a) >= v ? a : static_cast<unsigned int>(v);
linad99/dvect15.cpp:  dvector results(1, static_cast<int>(a.size() + b.size()));
linad99/dvect8.cpp:    elem(i) = static_cast<double>(u.elem(i));
linad99/dvect9.cpp:    if ((v = new double[static_cast<unsigned int>(count + 2)]) ==0)
linad99/dvector.cpp:  unsigned int size = static_cast<unsigned int>(nch - ncl + 1);
linad99/dvector.h:    return static_cast<unsigned int>(index_max - index_min + 1);
linad99/dveigen.cpp:  int n = static_cast<int>(d.size());
linad99/dveigenv.cpp:  int n = static_cast<int>(d.size());
linad99/dvsort2.cpp:        iq=l+((ir-l+1)*static_cast<int>(fx))/FM;
linad99/eigen.cpp:  int n = static_cast<int>(d.size());
linad99/eigenv.cpp:  int n = static_cast<int>(d.size());
linad99/expm.cpp:    return static_cast<int>(colsize);
linad99/fmm_cont.cpp:  scroll_flag = static_cast<int>(ipar[5]);
linad99/fmmtr1.cpp:     if (g.size() < static_cast<unsigned int>(n))
linad99/fvar_a10.cpp:  const int n = static_cast<int>(len);
linad99/fvar.hpp:    return static_cast<unsigned int>(indexmax() - indexmin() + 1);
linad99/fvar_m10.cpp:    unsigned int column = static_cast<unsigned int>(columns[i]);
linad99/fvar_m15.cpp:  int n = static_cast<int>(aa.colsize());
linad99/fvar_m20.cpp:  int n = static_cast<int>(aa.colsize());
linad99/fvar_m24.cpp:  int n = static_cast<int>(aa.colsize());
linad99/fvar_m42.cpp:  int n = static_cast<int>(aa.colsize());
linad99/fvar_ma4.cpp:  int n = static_cast<int>(a.colsize());
linad99/fvar_mat.cpp:      m = static_cast<dvar_vector*>(shape->get_pointer());
linad99/gradstrc.cpp:          MAX_NVAR_OFFSET = static_cast<unsigned int>(i);
linad99/i4arr.cpp:      t = static_cast<i3_array*>(shape->get_truepointer());
linad99/i5arr.cpp:      t = static_cast<i4_array*>(shape->get_truepointer());
linad99/imat.cpp:      m = static_cast<ivector*>(shape->get_pointer());
linad99/imatrix.h:    return static_cast<unsigned int>(colmax() - colmin() + 1);
linad99/indextyp.cpp:  unsigned int ss = static_cast<unsigned int>(
linad99/ivector.cpp:    if ((v = new int[static_cast<unsigned int>(nch - ncl + 1)]) == 0 )
linad99/ivector.h:    return static_cast<unsigned int>(
linad99/ivsort2.cpp:      iq=l+((ir-l+1)*static_cast<int>(fx))/FM;
linad99/minim.cpp:  int nvar = static_cast<int>(x.size());
linad99/newfmin.cpp:     if (g.size() < static_cast<unsigned int>(n))
linad99/ranfill.cpp:  r[j]=static_cast<float>(ix1)+r[j];
linad99/sgradclc.cpp:  if (g.size() < static_cast<unsigned int>(nvar))
linad99/timer.cpp:  return static_cast<double>(diff);
linad99/tweedie_logW.cpp:  unsigned int jh = static_cast<unsigned int>(ceil(j));
linad99/xgradclc.cpp:    int nlinks = static_cast<int>(GRAD_LIST->nlinks);
