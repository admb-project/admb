/**
 \mainpage Comprehensive Documentation of Functions and Classes
<br><center>
\image html admb-logo-notext-72.png
</center><br>
<B><CENTER>
Documentation of mathematical functions can be found on the 
Modules tab.
</CENTER></B>
<br>
<br>
Partial documentation of some of the AUTODIF Library and ADMB classes can
found on the "Classes" tab. No class is 
fully documented. See class \ref dvector for an example of 
how it might look and how to insert documentation.
<br>
<br>
This preliminary version of the API documentation is a work in progress.
If you would like ton contribute your expertize to the enterprize please contact
developers@admb-project.org.

* \section Overview
*
* The ADMB(Automatic Differentiation Model Builder) software suite 
* is an environment for non-linear statistical modeling enabling
* rapid model development, numerical stability, fast and efficient 
* computation, and high accuracy parameter estimates.  ADModel Builder
* is a high level language built around the AUTODIF Library, a C++
* language extension which transparently implements reverse mode 
* automatic differentiation.  A closely related software package, 
* ADMB-RE, implements random effects in non-linear models.
* 
* \section Donations
*
* ADMB is an open source project that is freely available for download.
* If you would like to contribute or donate funds, please contact 
* <users@admb-project.org>.  Cool ADMB T-shirts are also available 
* for purchase.
* 
* 
* \section Requirements
*
* ADMB has been tested and used on Windows and UNIX operating 
* systems in both 32 and 64 bit versions.  A C/C++ compiler 
* must be be installed on the local computer. Below lists some 
* tested compilers.
* 
* Several compilers are supported including:\n 
*  * GNU g++ 3.4 or newer\n
*  * Microsoft Visual C++ 2003 or newer\n
*  * MacOS XCode 3.2\n
*  * Intel C++ Compiler 11\n
*  * Sun Studio 12\n
*  * Borland 5.5\n
* 
* If the compiler is not listed, build the source distribution or 
* email user group <users@admb-project.org> for help.
* 
* \section Downloading
*
* Precompiled binaries and the source distribution can be downloaded
* from <http://www.admb-project.org/downloads/>.
* 
* \section install_sec Installation from Source Code
*
* Below are procedures for installing ADMB from source code for each platform.
* 
* \section gcc_sec Unix and GNU g++

* \subsection step1 1. Extract source distribution
*    
*    $ unzip admb-10.0.zip
* 
* \subsection step2 2. Change to distribution directory
* 
*    $ cd admb-10.0
* 
* \subsection step3 3. Configure the build files for 32-bit
* 
*    $ ./configure
* 
*    or configure the build files for 64-bit.
* 
*    $ ./configure BUILD_64BIT=yes
* 
* \subsection step4 4. Build libraries 
*   
*    $ make
* 
* \subsection step5 5. [Optional] Test build by running examples
* 
*    $ make verify
* 
* \subsection step6 6. Install libraries to default location /usr/local.
* 
*    $ make install
* 
* \section sun_sec Unix and Sun Studio 12
* ----------------------
* \subsection sun_step1 1. Extract source distribution
*    
*    $ unzip admb-10.0.zip
* 
* \subsection sun_step2 2. Change to source directory
* 
*    $ cd admb-10.0/src
* 
* \subsection sun_step3 3. Build libraries 
*   
*    $ make --file=sunstudio.mak
* 
* \subsection sun_step4 4. [Optional] Test build by running examples
* 
*    $ make verify
* 
* \subsection sun_step5 5. Install libraries to default location /usr/local.
* 
*    $ make install
* 
* \section cpp_sec Unix and Intel C++ Compiler
* 
* \subsection cpp_step1 1. Extract source distribution
*    
*    $ unzip admb-10.0.zip
* 
* \subsection cpp_step2 2. Change to source directory
* 
*    $ cd admb-10.0/src
* 
* \subsection cpp_step3 3. Build libraries 
*   
*    $ make --file=icc.mak
* 
* \subsection cpp_step4 4. [Optional] Test build by running examples
* 
*    $ make verify
* 
* \subsection cpp_step5 5. Install libraries to default location /usr/local.
* 
*    $ make install
* 
* \section vs_sec Microsoft Windows and Visual C++
* 
* \subsection vs_step1 1. Extract source distribution.
* 
* \subsection vs_step2 2. Open Visual C++ Command Prompt. 
* 
* \subsection vs_step3 3. Change directory to the "src" folder. 
* 
*    > cd admb-10.0\src
* 
* \subsection vs_step4 4. Build libraries
* 
*    > nmake /fvc.mak
* 
* \subsection vs_step5 5. [Optional] Test build by running examples
* 
*    > nmake /fvc.mak verify
* 
* \subsection vs_step6 6. Install libraries to default location %ProgramFiles%\ADMB and adds ADMB shortcuts in the Start menu.
* 
*    > nmake /fvc.mak install
* 
* \section bor_sec Microsoft Windows and Borland C++ 5.5
* -------------------------------------
* \subsection bor_step1 1. Extract source distribution.
* 
* \subsection bor_step1 2. Open Windows Command Prompt in Start->All Programs->Accessories.
* 
* \subsection bor_step1 3. Set BCC55_HOME variable to location of BCC55 folder.
* 
*    > set BCC55_HOME=c:\Borland\BCC55
* 
* \subsection bor_step1 4. Add BCC55_HOME to system PATH variable.
* 
*    > set PATH=c:\Borland\BCC55\Bin;%PATH%
* 
* \subsection bor_step1 5. Change directory to the "src" folder. 
* 
*    > cd admb-10.0\src
* 
* \subsection bor_step1 6. Build 32-bit libraries
* 
*    > make /fbcc.mak
* 
* \subsection bor_step1 7. [Optional] Test build by running examples
* 
*    > make /fbcc.mak verify
* 
* \subsection bor_step1 8. Install libraries to default location %ProgramFiles%\ADMB
*    and adds ADMB shortcuts in the Start menu.
* 
*    > make /fbcc.mak install
* 
* \section mingw_sec Microsoft Windows and MinGW (msys and gcc-4.5)
* ----------------------------------------------
* \subsection mingw_step1 1. Open MinGW Shell located in Start->MinGW->MinGW Shell.
* 
* \subsection mingw_step2 2. Extract source distribution.
*    
*    $ unzip admb-10.0.zip
* 
* \subsection mingw_step3 2. Change to distribution directory
* 
*    $ cd admb-10.0
* 
* \subsection mingw_step1 3. Configure the build files for 32-bit
* 
*    $ ./configure
* 
* \subsection mingw_step1 4. Build libraries 
*   
*    $ make
* 
* \subsection mingw_step1 5. [Optional] Test build by running examples
*  
*    $ make verify
* 
* \subsection mingw_step1 6. Install libraries to default location /usr/local.
* 
*    $ make install
* 
* Installation from Binary Distributions\n
* ======================================\n
* Binary installation instructions can be found at 
* http://www.admb-project.org/documentation/.
* 
* Documentation\n
* =============\n
* User manuals for ADModel Builder, the AUTODIF library and the ADMB-RE
* Nonlinear random effects module can be downloaded from 
* http://www.admb-project.org/downloads/.\n
* 
* More documentation is also available on the main ADMB homepage 
* http://www.admb-project.org/.\n
* 
* Developing ADModel Builder\n
* ==========================\n
* If you are interested in contributing to the further development of
* ADModel Builder please contact <users@admb-project.org>.\n
* 
* Version Control\n
* ---------------\n
* ADMB source version control is hosted at Code Google
* http://code.google.com/p/admb-project/.\n  
* 
* The instructions for checking out source trunk is at 
* http://code.google.com/p/admb-project/source/checkout.\n  
* 
* If you would like to write access, please email <users@admb-project.org>
* to request an account.\n
* 
* Help and Support\n
* ================\n
* For help and support, email the ADMB users group <users@admb-project.org>.\n
* 
* Contributors\n
* ============\n
* This software was originally developed by David Fournier of Otter Research, Ltd. \n
* 
* Several other folks have contributed to the ADMB Project:\n
* 
* David Fournier <davef@otter-rsch.com>\n
* John Sibert <sibert@hawaii.edu>\n
* Hans Skaug <Hans.Skaug@mi.uib.no>\n
* Mark Maunder <mmaunder@iattc.org> \n
* Anders Nielsen <anders@nielsensweb.org>\n
* Arni Magnusson <arnima@hafro.is> \n
* Derek Seiple <dseiple@hawaii.edu>\n
* Johnoel Ancheta <johnoel@hawaii.edu>\n
*
*
* etc...
*/

A computer lets you make more mistakes faster than any invention in human history - with the possible exceptions of handguns and tequila....




*/

/*
Comments on groupings
*/

/**  \defgroup matop Vector and Matrix Operations. 
\details The syntax of ADMB Matrix and vector operations follows normal
mathematical conventions as much as possible. If \c u and \c v are
vectors and \c M is a matrix, \code u*M \endcode is a normal matrix
multiplication and \code u*v \endcode is a dot product. 
Element-wise multiplications and divisions are accomplished by
\ref elem_prod and \ref elem_div respectively. 
If the arguments to these operations are not conformable for the appropriate
type and operation, the application will exit with an error message.

These operations have been overloaded for appropriate combinations of
constant and variable objects. 
The overloaded versions with variable
types are optimized for efficient derivative computation. 
Only the constant types are currently documented here.
*/

/**  \defgroup PDF Probability Distribution Functions.
*/

/**  \defgroup RNG Random Numbers.
*/

/**  \defgroup misc "Helper" Functions
\details ADMB functions to perform common operations. These functions are
typically optimized for automatic differentiation and automatically
invoke custom adjoint code.
*/

/** \defgroup DEVEL Development Utilities
\details ADMB functions of use to developers of ADMB code.
*/

/**
 * \defgroup gammafunc Gamma and related functions.
 */

/**
 * \defgroup eigen Eigenvalues and eigenvectors.
 */

/**
 * \defgroup cub_spline Class and methods for cubic splines.
 */

