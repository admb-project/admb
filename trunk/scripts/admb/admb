#!/bin/bash
#
# Created by: Arni Magnusson [2009-05-27] revision 243
#
# Copyright (c) 2008-2013 ADMB Foundation
#
shopt -s expand_aliases
alias help='echo -e "
Builds AD Model Builder application or library.\n
Usage: 
admb [-c] [-d] [-g] [-r] [-f] model [srcs]\n
Options:
 -c     Build object file only.
 -d     Build a shared library.
 -g     Build with debug symbols.
 -r     Build Random effects (ADMB-RE).
 -f     Build with Fast optimized mode (no bounds checking).
        By default, admb script builds with bounds checking.
 model  TPL file (ie 'simple.tpl' or the filename 'simple' with no .tpl extension)
 srcs   One or more C++ source files with functions that are used in the model.\n
Examples:

Build a random effects model,
[admb/examples/admb-re/bcb]$ admb -r bcb.tpl
The program file is bcb.

Build a shared library,
[admb/examples/admb/simple]$ admb -d simple.tpl
The program file is simple.

Build with srcs and debug symbols,
[admb/contrib/ad2csv]$ admb -g ad2csv.cpp main.cpp
The program file is ad2csv.
"'

if [[ "$1" == "" ]]; then help; exit; fi
if [[ "$1" == "-h" ]]; then help; exit; fi
if [[ "$1" == "-help" ]]; then help; exit; fi
if [[ "$1" == "--help" ]]; then help; exit; fi

if [ ! -z "$ADMB_HOME" ]; then
unset ADMB_HOME
fi

FILE=$0
DIRECTORY=$(cd `dirname $FILE` && pwd)
while [ -h "${FILE}" ]; do 
  pushd $DIRECTORY &> /dev/null
  FILE=$(readlink $DIRECTORY/admb)
  DIRECTORY=$(cd `dirname $FILE` && pwd)
  popd &> /dev/null
done
pushd "$DIRECTORY/.." &> /dev/null
declare -rx ADMB_HOME="$PWD"
popd &> /dev/null
PATH=$ADMB_HOME/bin:$PATH

# Pop args until model=$1
unset dll
unset debug
unset parser 
unset library
unset compileonly
dll=
debug=
parser=tpl2cpp
library=safe
compileonly=
output=
while getopts "dgrsfco:" A; do
  case $A in
    d) 
       dll=-dll
       ;;
    g) 
       debug=-debug
       ;;
    r) 
       parser=tpl2rem
       ;;
    s)
       ;;
    f) 
       library=opt
       ;;
    c) 
       compileonly=yes
       ;;
    o) 
       output="$OPTARG"
       ;;
    *)
       help
       exit 1
       ;;
  esac
done
shift $((OPTIND-1))

tpls=
srcs=
objs=
nontpls=

for file in $*
do
  extension="${file#*.}"
  if [ "$extension" = "$file" ]; then
    tpls="$tpls $file"
  elif [ "$extension" = "tpl" ]; then
    tpls="$tpls ${file%.*}"
  elif [ "$extension" = "cpp" -o "$extension" = "c" ]; then
    srcs="$srcs $file"
    nontpls="$nontpls $file"
  elif [ "$extension" = "o" -o "$extension" = "obj" ]; then
    objs="$objs $file"
    nontpls="$nontpls $file"
  fi
done
if [ -f "$ADMB_HOME/bin/admb-cfg.sh" ]; then
  source "$ADMB_HOME/bin/admb-cfg.sh"
  CXX=$ADMB_CFG_CXX
  CXXFLAGS="$CXXFLAGS $ADMB_CFG_CXXFLAGS"
  LDFLAGS="$LDFLAGS $ADMB_CFG_LDFLAGS"
else
  CXX=c++
  CXXFLAGS="$CXXFLAGS"
  LDFLAGS="$LDFLAGS"
fi
if [ ! -z "$dll" ]; then
  CXXFLAGS="-fPIC -DBUILDING_DLL $CXXFLAGSS"
  LDFLAGS="-shared $LDFLAGS"
fi
if [ ! -z "$debug" ]; then
  CXXFLAGS="-g $CXXFLAGS"
  LDFLAGS="-g $LDFLAGS"
else
  if [ "$CXX" == "openCC" ]; then
    CXXFLAGS="-O2 $CXXFLAGS"
    LDFLAGS="-O2 $LDFLAGS"
  else
    CXXFLAGS="-O3 $CXXFLAGS"
    LDFLAGS="-O3 $LDFLAGS"
  fi
fi
if [ "$library" == "opt" ]; then
  CXXFLAGS="$CXXFLAGS -DOPT_LIB"
else
  CXXFLAGS="$CXXFLAGS -DSAFE_ALL"
fi
CXXFLAGS="$CXXFLAGS -D__GNUDOS__ -Dlinux -DUSE_LAPLACE -I. -I\"$ADMB_HOME\"/include -I\"$ADMB_HOME\"/contrib/include"
if [ "$CXX" == "adcomp-x86_64-w64-mingw32" ]; then
  LDFLAGS="--static $LDFLAGS"
fi
tplsrcs=
for model in $tpls
do
  if [ ! -f $model.tpl ]; then
    echo -e "\\nError: $model.tpl not found\\n"
    exit 1
  fi

  rm -vf classdef.tmp xxdata.tmp xxhtop.tmp xxhtopm.tmp xxglobal.tmp xxtopm.tmp 
  rm -vf xxalloc.tmp xxalloc1.tmp xxalloc2.tmp xxalloc3.tmp xxalloc4.tmp xxalloc5.tmp xxalloc6.tmp header.tmp 
  rm -vf tfile1 tfile2 tfile3 tfile4 tfile5
  rm -f $model.cpp $model.htp $model.o $model

  CMD="$parser $debug $dll $model"
  echo -e \\n\*\*\* Parsing tpl file: $model.tpl\\n$CMD
  eval $CMD

  if [ ! -f $model.cpp -o ! -f $model.htp ]; then
    echo -e "\\nError: could not parse $model.tpl\\n"
    exit 1
  fi
  tplsrcs="$tplsrcs ${model%.*}.cpp"
done

tplobjs=
for file in $tplsrcs
do
  if [ ! -f $file ]; then
    echo -e "\\nError: $file not found\\n"
    exit 1
  fi

  CMD="$CXX -c $CXXFLAGS $file"
  echo -e \\n\*\*\* Compiling source file: $file\\n$CMD
  eval $CMD

  if [[ ! -f ${file%.*}.o ]]; then
    echo -e "\\nError: Could not compile $file\\n"
    exit 1
  fi
  tplobjs="$tplobjs ${file%.*}.o"
done

for file in $srcs
do
  if [ ! -f $file ]; then
    echo -e "\\nError: $file not found\\n"
    exit 1
  fi
  CMD="$CXX -c $CXXFLAGS $file"
  echo -e \\n\*\*\* Compiling source file: $file\\n$CMD
  eval $CMD
  if [[ ! -f ${file%.*}.o ]]; then
    echo -e "\\nError: Could not compile $file\\n"
    exit 1
  fi
  objs="${file%.*}.o $objs"
done

if [ ! -z "$compileonly" ]; then
  objects=$tplobjs
  if [ ! -z "$objs" ]; then
    objects=$objs
  fi
  echo -e "\\nSuccessfully compiled \"$objects\".\\n"
  exit 0
fi 

for file in $tplobjs
do
  if [ ! -z  "$output" ]; then
    model="$output"
  else
    model=${file%.*}
  fi
  if [ ! -z  "$dll" ]; then
    CMD="$CXX $LDFLAGS -o $model.so"
  else
    CMD="$CXX $LDFLAGS -o $model"
  fi
  CMD="$CMD $file $objs"
  if [[ "$library" == "opt" ]]; then
    CMD="$CMD \"$ADMB_HOME\"/contrib/lib/libcontribo.a \"$ADMB_HOME\"/lib/libadmbo.a"
  else
    CMD="$CMD \"$ADMB_HOME\"/contrib/lib/libcontrib.a \"$ADMB_HOME\"/lib/libadmb.a"
  fi
  echo -e \\n\*\*\* Linking files: $file $objs\\n$CMD
  eval $CMD
  if [[ -z $dll ]]; then 
    if [[ ! -f $model ]]; then 
        echo -e "\\nError: Could not build $model\\n"
        exit 1
    fi
  else
    if [[ ! -f $model.so ]]; then
        echo -e "\\nError: Could not build $model.so\\n"
        exit 1
    fi
  fi
done

if [[ "$tplobjs" == "" ]]; then
  outputfilebasename=
  if [ ! -z  "$output" ]; then
    outputfilebasename="$output"
  fi
  listobjs=
  for file in $nontpls
  do
    extension="${file#*.}"
    if [ "$extension" = "o" -o "$extension" = "obj" ]; then
      listobjs="$listobjs $file"
    else
      listobjs="$listobjs ${file%.*}.o"
    fi
    if [ -z  "$outputfilebasename" ]; then
      outputfilebasename="`basename $file`"
      outputfilebasename=${file%.*}
    fi
  done
  if [ ! -z  "$dll" ]; then
    CMD="$CXX $LDFLAGS -o $outputfilebasename.so"
  else
    CMD="$CXX $LDFLAGS -o $outputfilebasename"
  fi
  CMD="$CMD $listobjs"
  if [[ "$library" == "opt" ]]; then
    CMD="$CMD \"$ADMB_HOME\"/contrib/lib/libcontribo.a \"$ADMB_HOME\"/lib/libadmbo.a"
  else
    CMD="$CMD \"$ADMB_HOME\"/contrib/lib/libcontrib.a \"$ADMB_HOME\"/lib/libadmb.a"
  fi
  echo -e \\n\*\*\* Linking files: $listobjs\\n$CMD
  eval $CMD

  if [ ! -z  "$output" ]; then
    if [[ -z $dll ]]; then 
      if [[ ! -f $output ]]; then 
        echo -e "\\nError: Could not build $output\\n"
        exit 1
      fi
    else
      if [[ ! -f $output.so ]]; then
        echo -e "\\nError: Could not build $output.so\\n"
        exit 1
      fi
    fi
  else
    declare -a amodel=( $listobjs )
    m=${amodel[0]}
    m2=${m%.*}
    if [[ -z $dll ]]; then 
      if [[ ! -f $m2 ]]; then 
        echo -e "\\nError: Could not build $m2\\n"
        exit 1
      fi
    else
      if [[ ! -f $m2.so ]]; then
        echo -e "\\nError: Could not build $m2.so\\n"
        exit 1
      fi
    fi
  fi
fi

echo -e "\\nSuccessfully built executable.\\n"
exit 0
